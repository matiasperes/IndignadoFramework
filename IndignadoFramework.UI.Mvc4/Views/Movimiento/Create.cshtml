
@model IndignadoFramework.Entities.Movimiento

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script>

      <script type="text/javascript">
          var map = null;
          var click;
          function getMap() {
              map = new Microsoft.Maps.Map(document.getElementById('myMap'), { credentials: 'AjKX5fPclkvH3YTYhLImWMour1KISHMrcFVBrXzVsjqwMLiWobOq83esCN1ra0Q0' });
          }

          function mapClickEventHandler() {
              click = Microsoft.Maps.Events.addHandler(map, 'click', displayInfo);
              alert('Perform action on map to fire this event');
          }
          function detachMapClickEventHandler() {
              Microsoft.Maps.Events.removeHandler(click);
              alert('event detached');
          }
          displayInfo = function (e) {
              var output = document.getElementById("output");
              if (!output) {
                  output = document.createElement("div");
                  output.id = "output";
                  document.body.appendChild(output);
              }
              output.innerHTML = "Event info - " + e.eventName + "<br><br>"
                           + "Window:" + e.originalEvent.screenX + "(x) " + e.originalEvent.screenY + "(y)<br>"
                           + "client:" + e.originalEvent.clientX + "(x) " + e.originalEvent.clientY + "(y)<br>"
                           + "Keychar:" + e.originalEvent.keyCode + "<br>"
                           + "keys  :" + e.originalEvent.altKey + "(alt) " + e.originalEvent.ctrlKey + "(ctrl) " + e.originalEvent.shiftKey + "(shift)<br>";
          };

          function setView() {
              map.setView({ zoom: 12, center: new Microsoft.Maps.Location("@Model.UbicacionLatitud", "@Model.UbicacionLongitud") });
          }


          endDragDetails = function (e) {

              var $latitud = $('#UbicacionLatitud');
              var valueLatitude = $latitud.val();
              var $longitud = $('#UbicacionLongitud');
              var valueLongitud = $longitud.val();

              valueLatitude = e.entity.getLocation().latitude.toString();
              $latitud.val(valueLatitude);
              valueLongitud = e.entity.getLocation().longitude.toString();
              $longitud.val(valueLongitud);

          };

          function addPinPin(lon, lat) {
              var pushpinOptions = { draggable: true };

              var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(lat, lon), pushpinOptions);
              var pushpindragend = Microsoft.Maps.Events.addHandler(pushpin, 'dragend', endDragDetails);
              map.entities.push(pushpin);
          }


          
          $(document).ready(function () { getMap(); setView();});
          $(window).load(function () { addPinPin("@Model.UbicacionLongitud", "@Model.UbicacionLatitud"); });



</script>


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Crear Movimiento</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Nombre)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Nombre)
            @Html.ValidationMessageFor(model => model.Nombre)
        </div>

        <input type="hidden" id="UbicacionLatitud" name="UbicacionLatitud" value="@Model.UbicacionLatitud" />

        <input type="hidden" id="UbicacionLongitud" name="UbicacionLongitud" value="@Model.UbicacionLongitud" />

        <div> 
            <div id='myMap' style="position:relative; width:400px; height:400px;"></div>
            <div id='output'> </div>
        </div>

        
        <div class="editor-label">
            @Html.LabelFor(model => model.Descripcion)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Descripcion)
            @Html.ValidationMessageFor(model => model.Descripcion)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Logo)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Logo)
            @Html.ValidationMessageFor(model => model.Logo)
        </div>
        <div class="editor-field">
        @{List<SelectListItem> items = new List<SelectListItem>();
            items.Add(new SelectListItem
                    {
                        Text = "Blue",
                        Value = "0"
                    });
            items.Add(new SelectListItem
                    {
                        Text = "Black",
                        Value = "1"
                    });
            items.Add(new SelectListItem
                    {
                        Text = "Red",
                        Value = "2",
                    });
        }
        @Html.Label("Estilo", new { @class = "DropDownList" })
        @Html.DropDownList("Estilo", items, new { style = " width: 300px; box-shadow: 2px 2px 2px #888888; background-color: #fff; border: 3px solid #99f; cursor: pointer; font-size: 1.2em; font-size: 1.2em; color: #333;" })
            @*Html.EditorFor(model => model.Estilo)
            Html.ValidationMessageFor(model => model.Estilo)*@
       
        </div>
        <br />
        <div class="editor-label">
            @Html.LabelFor(model => model.M)
            (Numero de contenidos rankeados por tiempo)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.M)
            @Html.ValidationMessageFor(model => model.M)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.N)
            (Numero de contenidos rankeados por marcas de me gusta)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.N)
            @Html.ValidationMessageFor(model => model.N)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.X)
            (Numero maximo de marcas de contenidos inadecuados)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.X)
            @Html.ValidationMessageFor(model => model.X)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Z)
            (Numero maximo de contenidos inadecuados por usuario)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Z)
            @Html.ValidationMessageFor(model => model.Z)
        
        </div>
                

        <p>
            <input type="submit" value="Siguiente" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
